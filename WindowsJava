using System;

public class MaxMinFinder<T> where T : IComparable<T>
{
    public T FindMax(T a, T b, T c)
    {
        if (a.CompareTo(b) >= 0 && a.CompareTo(c) >= 0)
        {
            return a;
        }
        else if (b.CompareTo(a) >= 0 && b.CompareTo(c) >= 0)
        {
            return b;
        }
        else
        {
            return c;
        }
    }

    public T FindMin(T a, T b, T c)
    {
        if (a.CompareTo(b) <= 0 && a.CompareTo(c) <= 0)
        {
            return a;
        }
        else if (b.CompareTo(a) <= 0 && b.CompareTo(c) <= 0)
        {
            return b;
        }
        else
        {
            return c;
        }
    }
}

class Program
{
    static void Main()
    {
        MaxMinFinder<double> doubleFinder = new MaxMinFinder<double>();

        double num1 = 12.5;
        double num2 = 9.3;
        double num3 = 15.7;

        double max = doubleFinder.FindMax(num1, num2, num3);
        double min = doubleFinder.FindMin(num1, num2, num3);

        Console.WriteLine($"Max: {max}");
        Console.WriteLine($"Min: {min}");
    }
}











using System;
using System.Collections.Generic;

class Program
{
    static void Main()
    {
        Queue<Person> seniorCitizenQueue = new Queue<Person>();
        Queue<Person> generalQueue = new Queue<Person>();

        // Input for 6 people
        for (int i = 1; i <= 6; i++)
        {
            Console.Write($"Enter name for Person {i}: ");
            string name = Console.ReadLine();
            Console.Write($"Enter age for Person {i}: ");
            int age = int.Parse(Console.ReadLine());

            Person person = new Person(name, age);

            if (age >= 60)
            {
                seniorCitizenQueue.Enqueue(person);
            }
            else
            {
                generalQueue.Enqueue(person);
            }
        }

        Console.WriteLine("Processing Sequence:");

        while (seniorCitizenQueue.Count > 0)
        {
            Console.WriteLine(seniorCitizenQueue.Dequeue());
            if (generalQueue.Count > 0)
                Console.WriteLine(generalQueue.Dequeue());
        }

        while (generalQueue.Count > 0)
        {
            Console.WriteLine(generalQueue.Dequeue());
        }
    }
}

class Person
{
    public string Name { get; set; }
    public int Age { get; set; }

    public Person(string name, int age)
    {
        Name = name;
        Age = age;
    }

    public override string ToString()
    {
        return $"Name: {Name}, Age: {Age}";
    }
}












using System;
using System.Collections;

class Question
{
    public string QuestionName { get; set; }
    public bool CorrectAnswer { get; set; }

    public Question(string questionName, bool correctAnswer)
    {
        QuestionName = questionName;
        CorrectAnswer = correctAnswer;
    }
}

class Paper
{
    public BitArray AnsActual { get; set; }

    public Paper()
    {
        AnsActual = new BitArray(4);
    }
}

class Program
{
    static void Main()
    {
        Question[] questions = new Question[4];
        questions[0] = new Question("Q1: Collection namespace has ICollection interface (T/F):", true);
        questions[1] = new Question("Q2: An IList in C# represents the class List in other languages (T/F):", false);
        questions[2] = new Question("Q3: An Array and any collection is interchangeable object types (T/F):", false);
        questions[3] = new Question("Q4: Collection is a part of BCL in .Net Framework (T/F):", true);

        Paper paper = new Paper();

        Console.WriteLine("Please answer the following questions with 'T' for True or 'F' for False:");

        for (int i = 0; i < questions.Length; i++)
        {
            Console.Write($"{questions[i].QuestionName} ");
            string userAnswerStr = Console.ReadLine();
            bool userAnswer = (userAnswerStr.ToUpper() == "T");
            paper.AnsActual[i] = userAnswer;

            if (userAnswer == questions[i].CorrectAnswer)
            {
                Console.WriteLine("Correct! +5 Marks");
            }
            else
            {
                Console.WriteLine("Incorrect! 0 Marks");
            }
        }

        int totalMarks = paper.AnsActual.Cast<bool>().Count(ans => ans) * 5;
        Console.WriteLine($"Total Marks: {totalMarks} out of 20 marks.");
    }
}









BitArray actual = new BitArray(4);
actual[0] = true;   // Q1: Collection namespace has ICollection interface (True)
actual[1] = false;  // Q2: An IList in C# represents the class List in other languages (False)
actual[2] = false;  // Q3: An Array and any collection is interchangeable object Types (False)
actual[3] = true;   // Q4: Collection is a part of BCL in .Net Framework (True)

BitArray userAnswers = new BitArray(4);

Console.WriteLine("Please answer the following questions with 'T' for True or 'F' for False:");

// Q1
Console.Write("Q1: Collection namespace has ICollection interface (T/F): ");
string q1Answer = Console.ReadLine();
userAnswers[0] = (q1Answer.ToUpper() == "T");

// Q2
Console.Write("Q2: An IList in C# represents the class List in other languages (T/F): ");
string q2Answer = Console.ReadLine();
userAnswers[1] = (q2Answer.ToUpper() == "F");

// Q3
Console.Write("Q3: An Array and any collection is interchangeable object types (T/F): ");
string q3Answer = Console.ReadLine();
userAnswers[2] = (q3Answer.ToUpper() == "F");

// Q4
Console.Write("Q4: Collection is a part of BCL in .Net Framework (T/F): ");
string q4Answer = Console.ReadLine();
userAnswers[3] = (q4Answer.ToUpper() == "T");

// Calculate marks
int totalMarks = 0;
for (int i = 0; i < 4; i++)
{
    if (userAnswers[i] == actual[i])
    {
        totalMarks += 5;
    }
}

Console.WriteLine($"You scored {totalMarks} out of 20 marks.");












using System;

class Employee
{
    public string Name { get; set; }
    public int Age { get; set; }

    public Employee(string name, int age)
    {
        Name = name;
        Age = age;
    }
}

class DuplicateNameException : Exception
{
    public DuplicateNameException(string name)
        : base($"Duplicate Name: {name} (Need double Salary??)")
    {
    }
}

class InvalidAgeException : Exception
{
    public InvalidAgeException(int age)
        : base(age < 18 ? "Children not allowed as an Employee" :
               age > 60 ? "Seniors not allowed as an Employee" :
               age < 0 ? "Ghosts not allowed as an Employee" :
               age > 100 ? "Purvaj not allowed as an Employee" :
               "Invalid Age")
    {
    }
}

class Program
{
    static Employee[] employees = new Employee[100]; // Change the size of the array as needed
    static int employeeCount = 0;

    static void Main(string[] args)
    {
        while (true)
        {
            Console.WriteLine("Menu:");
            Console.WriteLine("1. Enter new Employee");
            Console.WriteLine("2. List the Employees");
            Console.WriteLine("3. Exit");
            Console.Write("Enter your choice: ");
            
            int choice;
            if (int.TryParse(Console.ReadLine(), out choice))
            {
                switch (choice)
                {
                    case 1:
                        EnterNewEmployee();
                        break;
                    case 2:
                        ListEmployees();
                        break;
                    case 3:
                        Environment.Exit(0);
                        break;
                    default:
                        Console.WriteLine("Invalid choice. Try again.");
                        break;
                }
            }
            else
            {
                Console.WriteLine("Invalid input. Try again.");
            }
        }
    }

    static void EnterNewEmployee()
    {
        try
        {
            Console.Write("Enter Employee Name: ");
            string name = Console.ReadLine();

            if (IsNameDuplicate(name))
            {
                throw new DuplicateNameException(name);
            }

            Console.Write("Enter Employee Age: ");
            int age = int.Parse(Console.ReadLine());

            if (age < 0 || age > 100)
            {
                throw new InvalidAgeException(age);
            }

            if (employeeCount < employees.Length)
            {
                employees[employeeCount++] = new Employee(name, age);
                Console.WriteLine("Employee added successfully.");
            }
            else
            {
                Console.WriteLine("Maximum number of employees reached.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
            if (ex.InnerException != null)
            {
                Console.WriteLine($"Inner Exception: {ex.InnerException.Message}");
            }
        }
    }

    static bool IsNameDuplicate(string name)
    {
        for (int i = 0; i < employeeCount; i++)
        {
            if (employees[i] != null && employees[i].Name.Equals(name, StringComparison.OrdinalIgnoreCase))
            {
                return true;
            }
        }
        return false;
    }

    static void ListEmployees()
    {
        Console.WriteLine("List of Employees:");
        for (int i = 0; i < employeeCount; i++)
        {
            Console.WriteLine($"Name: {employees[i].Name}, Age: {employees[i].Age}");
        }
    }
}












using System;

class Program
{
    static void Main(string[] args)
    {
        try
        {
            if (args.Length % 2 != 0)
            {
                throw new ArgumentException("The list is not complete");
            }

            int hoursInADay = 8;
            for (int i = 0; i < args.Length; i += 2)
            {
                string topic = args[i];
                if (!int.TryParse(args[i + 1], out int hours))
                {
                    throw new ArgumentException("The list is incorrect");
                }

                int trainingDays = (int)Math.Ceiling((double)hours / hoursInADay);
                Console.WriteLine($"{topic}: {trainingDays} days training");
            }
        }
        catch (ArgumentException ex)
        {
            Console.WriteLine(ex.Message);
        }
        catch (Exception ex)
        {
            Console.WriteLine("An error occurred: " + ex.Message);
        }
    }
}









using System;

// Define the Imylterator interface
public interface Imylterator
{
    int next();
    void begin();
    bool hasNext();
}

// Define the myCollection class
public class myCollection
{
    private int[] arr = new int[10000];
    private int tos = -1;

    public void Add(int i)
    {
        if (tos < 9999)
        {
            tos++;
            arr[tos] = i;
        }
    }

    public Imylterator GetIterator()
    {
        return new myIterator(this);
    }

    // Inner class myIterator that implements Imylterator
    private class myIterator : Imylterator
    {
        private myCollection collection;
        private int nav = -1;

        public myIterator(myCollection collection)
        {
            this.collection = collection;
        }

        public int next()
        {
            if (collection.tos != -1 && nav <= collection.tos)
            {
                int value = collection.arr[nav];
                nav++;
                return value;
            }
            else
            {
                throw new InvalidOperationException("No more elements to iterate.");
            }
        }

        public void begin()
        {
            if (collection.tos >= 0)
            {
                nav = 0;
            }
        }

        public bool hasNext()
        {
            return nav <= collection.tos;
        }
    }
}

class Program
{
    static void Main(string[] args)
    {
        myCollection c1 = new myCollection();

        // Adding elements manually
        c1.Add(11);
        c1.Add(22);
        c1.Add(33);

        Imylterator it = c1.GetIterator();
        it.begin();

        while (it.hasNext())
        {
            Console.WriteLine(it.next());
        }
    }
}













using System;

// Define the Operation interface with the 'op' method
interface Operation
{
    int op(int num1, int num2);
}

// Create classes for different mathematical operations
class Sum : Operation
{
    public int op(int num1, int num2)
    {
        return num1 + num2;
    }
}

class Sub : Operation
{
    public int op(int num1, int num2)
    {
        return num1 - num2;
    }
}

class Mul : Operation
{
    public int op(int num1, int num2)
    {
        return num1 * num2;
    }
}

class Div : Operation
{
    public int op(int num1, int num2)
    {
        if (num2 != 0)
        {
            return num1 / num2;
        }
        else
        {
            Console.WriteLine("Error: Division by zero");
            return 0;
        }
    }
}

// Define a MathOperation class that takes two operands and an operation
class MathOperation
{
    private int Operand1;
    private int Operand2;
    private Operation operation;

    public MathOperation(int operand1, int operand2, Operation operation)
    {
        Operand1 = operand1;
        Operand2 = operand2;
        this.operation = operation;
    }

    public void operate()
    {
        int result = operation.op(Operand1, Operand2);
        Console.WriteLine("Result: " + result);
    }
}

class Program
{
    static void Main(string[] args)
    {
        Console.WriteLine("Enter Operand 1:");
        int operand1 = Convert.ToInt32(Console.ReadLine());

        Console.WriteLine("Enter Operand 2:");
        int operand2 = Convert.ToInt32(Console.ReadLine());

        // Create objects of different operation classes
        Operation sumOperation = new Sum();
        Operation subOperation = new Sub();
        Operation mulOperation = new Mul();
        Operation divOperation = new Div();

        // Create MathOperation objects and perform operations
        MathOperation sumMath = new MathOperation(operand1, operand2, sumOperation);
        MathOperation subMath = new MathOperation(operand1, operand2, subOperation);
        MathOperation mulMath = new MathOperation(operand1, operand2, mulOperation);
        MathOperation divMath = new MathOperation(operand1, operand2, divOperation);

        Console.WriteLine("Sum:");
        sumMath.operate();

        Console.WriteLine("Subtraction:");
        subMath.operate();

        Console.WriteLine("Multiplication:");
        mulMath.operate();

        Console.WriteLine("Division:");
        divMath.operate();
    }
}













using System;

class Program
{
    static void Main(string[] args)
    {
        Console.Write("Enter a non-negative integer: ");
        if (int.TryParse(Console.ReadLine(), out int number) && number >= 0)
        {
            long factorial = 1;
            for (int i = 1; i <= number; i++)
            {
                factorial *= i;
            }
            Console.WriteLine($"Factorial of {number} is {factorial}");
        }
        else
        {
            Console.WriteLine("Invalid input. Please enter a non-negative integer.");
        }
    }
}







using System;

class Program
{
    static bool IsPrime(int number)
    {
        if (number <= 1)
            return false;
        if (number <= 3)
            return true;
        if (number % 2 == 0 || number % 3 == 0)
            return false;
        
        for (int i = 5; i * i <= number; i += 6)
        {
            if (number % i == 0 || number % (i + 2) == 0)
                return false;
        }
        
        return true;
    }

    static void Main(string[] args)
    {
        if (args.Length != 2)
        {
            Console.WriteLine("Error: Please provide exactly two integer arguments.");
            return;
        }

        if (int.TryParse(args[0], out int num1) && int.TryParse(args[1], out int num2))
        {
            int start = Math.Min(num1, num2);
            int end = Math.Max(num1, num2);

            if (start <= end)
            {
                for (int i = start; i <= end; i++)
                {
                    if (IsPrime(i))
                        Console.Write(i + (i == end || i == end - 1 ? "" : ", "));
                }
            }
            else
            {
                for (int i = start; i >= end; i--)
                {
                    if (IsPrime(i))
                        Console.Write(i + (i == end || i == end + 1 ? "" : ", "));
                }
            }
            
            Console.WriteLine();
        }
        else
        {
            Console.WriteLine("Error: Both arguments must be valid integers.");
        }
    }
}











using System;

class Program
{
    static void Main()
    {
        // Define correct username and password
        string correctUsername = "Monica";
        string correctPassword = "Gupta";

        int attempts = 3;
        bool loggedIn = false;

        Console.WriteLine("Welcome to the Login Program");

        while (attempts > 0 && !loggedIn)
        {
            Console.Write("Username: ");
            string username = Console.ReadLine();
            Console.Write("Password: ");
            string password = Console.ReadLine();

            if (username == correctUsername && password == correctPassword)
            {
                loggedIn = true;
                Console.WriteLine("Welcome, Monica!");
            }
            else
            {
                attempts--;
                Console.WriteLine($"Incorrect username or password. {attempts} attempts remaining.");
            }
        }

        if (!loggedIn)
        {
            Console.WriteLine("You have exceeded the maximum number of login attempts. Press Enter to exit.");
            Console.ReadLine(); // Wait for Enter key press to exit
        }
    }
}











using System;

class Program
{
    static void Main()
    {
        // Declare an integer array of 6 elements
        int[] arr = new int[6];

        // Take 6 elements from the user as input
        for (int i = 0; i < 6; i++)
        {
            Console.Write($"Enter element {i + 1}: ");
            arr[i] = Convert.ToInt32(Console.ReadLine());
        }

        // 1. Find the maximum and minimum from the array and print them
        int maxNum = arr[0];
        int minNum = arr[0];

        foreach (int num in arr)
        {
            if (num > maxNum)
                maxNum = num;
            if (num < minNum)
                minNum = num;
        }

        Console.WriteLine($"Maximum: {maxNum}");
        Console.WriteLine($"Minimum: {minNum}");

        // 2. Print all even numbers from the array
        Console.Write("Even numbers: ");
        foreach (int num in arr)
        {
            if (num % 2 == 0)
                Console.Write(num + " ");
        }
        Console.WriteLine();

        // 3. Print the square of each element of the array
        Console.Write("Squared elements: ");
        foreach (int num in arr)
        {
            int square = num * num;
            Console.Write(square + " ");
        }
        Console.WriteLine();
    }
}













import java.util.Scanner;

// Base class representing the MainOS
class MainOS {
    protected boolean mouseOperable;
    protected String desktop;
    protected String fileManager;

    public MainOS() {
        mouseOperable = true;
        desktop = "Default Desktop";
        fileManager = "Default File Manager";
    }

    public void displayFeatures() {
        System.out.println("Mouse operable: " + mouseOperable);
        System.out.println("Desktop: " + desktop);
        System.out.println("File Manager: " + fileManager);
    }
}

// Derived class for Windows OS
class WinOS extends MainOS {
    private String cmd;

    public WinOS() {
        cmd = "Command Prompt";
    }

    @Override
    public void displayFeatures() {
        super.displayFeatures();
        System.out.println("Command Line Interface: " + cmd);
    }
}

// Derived class for Linux OS
class LinuxOS extends MainOS {
    private String terminal;

    public LinuxOS() {
        terminal = "Terminal";
    }

    @Override
    public void displayFeatures() {
        super.displayFeatures();
        System.out.println("Terminal: " + terminal);
    }
}

// Derived class for MacOS
class MacOS extends MainOS {
    private String terminal;

    public MacOS() {
        terminal = "Terminal";
    }

    @Override
    public void displayFeatures() {
        super.displayFeatures();
        System.out.println("Terminal: " + terminal);
    }
}

// Class representing a Dell laptop
class DellLaptop {
    private MainOS os;

    public DellLaptop(MainOS os) {
        this.os = os;
    }

    public void displayFeatures() {
        System.out.println("Dell Laptop Features:");
        os.displayFeatures();
    }
}

public class OperatingSystemMenu {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int choice;

        do {
            System.out.println("Welcome to Dell Laptop OS selection:");
            System.out.println("1. Windows OS");
            System.out.println("2. Linux OS");
            System.out.println("3. MacOS");
            System.out.println("4. Exit");
            System.out.print("Enter your choice: ");

            choice = scanner.nextInt();

            switch (choice) {
                case 1:
                    DellLaptop winLaptop = new DellLaptop(new WinOS());
                    winLaptop.displayFeatures();
                    break;
                case 2:
                    DellLaptop linuxLaptop = new DellLaptop(new LinuxOS());
                    linuxLaptop.displayFeatures();
                    break;
                case 3:
                    DellLaptop macLaptop = new DellLaptop(new MacOS());
                    macLaptop.displayFeatures();
                    break;
                case 4:
                    System.out.println("Exiting the program.");
                    break;
                default:
                    System.out.println("Invalid choice. Please try again.");
                    break;
            }
        } while (choice != 4);

        scanner.close();
    }
}
